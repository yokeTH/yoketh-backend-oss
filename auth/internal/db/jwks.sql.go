// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: jwks.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const countJWK = `-- name: CountJWK :one
SELECT
  COUNT(*)
FROM
  jwk_keys
WHERE
  status IN ('ACTIVE', 'RETIRING')
`

func (q *Queries) CountJWK(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countJWK)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createJWK = `-- name: CreateJWK :exec
INSERT INTO
  jwk_keys (
    kid,
    alg,
    public_jwk,
    status,
    priv_ciphertext,
    priv_nonce,
    wrapped_dek,
    kek_ref,
    created_at,
    rotated_at
  )
VALUES
  ($1, $2, $3, 'ACTIVE', $4, $5, $6, $7, now(), NULL)
`

type CreateJWKParams struct {
	KID            string
	ALG            string
	PublicJWK      json.RawMessage
	PrivCiphertext []byte
	PrivNonce      []byte
	WrappedDEK     []byte
	KEKRef         sql.NullString
}

func (q *Queries) CreateJWK(ctx context.Context, arg CreateJWKParams) error {
	_, err := q.db.ExecContext(ctx, createJWK,
		arg.KID,
		arg.ALG,
		arg.PublicJWK,
		arg.PrivCiphertext,
		arg.PrivNonce,
		arg.WrappedDEK,
		arg.KEKRef,
	)
	return err
}

const getJWK = `-- name: GetJWK :one
SELECT
  kid,
  alg,
  public_jwk,
  status,
  priv_ciphertext,
  priv_nonce,
  wrapped_dek,
  kek_ref,
  created_at,
  rotated_at
FROM
  jwk_keys
WHERE
  status IN ('ACTIVE', 'RETIRING')
ORDER BY
  CASE status
    WHEN 'ACTIVE' THEN 0
    ELSE 1
  END,
  created_at DESC
LIMIT
  1
`

type GetJWKRow struct {
	KID            string
	ALG            string
	PublicJWK      json.RawMessage
	Status         string
	PrivCiphertext []byte
	PrivNonce      []byte
	WrappedDEK     []byte
	KEKRef         sql.NullString
	CreatedAt      time.Time
	RotatedAt      sql.NullTime
}

func (q *Queries) GetJWK(ctx context.Context) (GetJWKRow, error) {
	row := q.db.QueryRowContext(ctx, getJWK)
	var i GetJWKRow
	err := row.Scan(
		&i.KID,
		&i.ALG,
		&i.PublicJWK,
		&i.Status,
		&i.PrivCiphertext,
		&i.PrivNonce,
		&i.WrappedDEK,
		&i.KEKRef,
		&i.CreatedAt,
		&i.RotatedAt,
	)
	return i, err
}

const getPubJWK = `-- name: GetPubJWK :many
SELECT
  kid,
  public_jwk
FROM
  jwk_keys
WHERE
  status IN ('ACTIVE', 'RETIRED')
ORDER BY
  created_at DESC
`

type GetPubJWKRow struct {
	KID       string
	PublicJWK json.RawMessage
}

func (q *Queries) GetPubJWK(ctx context.Context) ([]GetPubJWKRow, error) {
	rows, err := q.db.QueryContext(ctx, getPubJWK)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPubJWKRow
	for rows.Next() {
		var i GetPubJWKRow
		if err := rows.Scan(&i.KID, &i.PublicJWK); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJWKToRetired = `-- name: UpdateJWKToRetired :exec
UPDATE jwk_keys
SET
  status = 'RETIRED'
WHERE
  status = 'RETIRING'
`

func (q *Queries) UpdateJWKToRetired(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateJWKToRetired)
	return err
}

const updateJWKToRetiring = `-- name: UpdateJWKToRetiring :exec
UPDATE jwk_keys
SET
  status = 'RETIRING',
  rotated_at = now()
WHERE
  status = 'ACTIVE'
`

func (q *Queries) UpdateJWKToRetiring(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateJWKToRetiring)
	return err
}
